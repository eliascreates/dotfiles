// Place your key bindings in this file to override the defaults
[
  //VIM SHORTCUTS
  // NAVIGATION
  // Splits Movement
  {
    "key": "ctrl+h",
    "command": "workbench.action.navigateLeft",
    "when": "vim.mode != 'Insert'"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.navigateRight",
    "when": "vim.mode != 'Insert'"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.navigateUp",
    "when": "vim.mode != 'Insert' && !terminalFocus && !terminalFocus"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.navigateDown",
    "when": "vim.mode != 'Insert'"
  },
  //Insert Mode Movement
  {
    "key": "ctrl+h",
    "command": "cursorLeft",
    "when": "editorTextFocus && vim.mode == 'Insert'"
  },
  {
    "key": "ctrl+j",
    "command": "cursorDown",
    "when": "editorTextFocus && vim.mode == 'Insert'"
  },
  {
    "key": "ctrl+k",
    "command": "cursorUp",
    "when": "editorTextFocus && vim.mode == 'Insert' && !terminalFocus"
  },
  {
    "key": "ctrl+l",
    "command": "cursorRight",
    "when": "editorTextFocus && vim.mode == 'Insert'"
  },
  // Movements Popups
  {
    "key": "ctrl+p",
    "command": "workbench.action.quickOpenSelectPrevious",
    "when": "!editorTextFocus && inQuickOpen && vim.mode != 'Insert'"
  },
  {
    "key": "ctrl+n",
    "command": "workbench.action.quickOpenSelectNext",
    "when": "!editorTextFocus && inQuickOpen && vim.mode != 'Insert'"
  },
  {
    "key": "ctrl+p",
    "command": "-workbench.action.quickOpenNavigatePreviousInFilePicker",
    "when": "inFilesPicker && inQuickOpen"
  },
  {
    "key": "ctrl+n",
    "command": "-workbench.action.quickOpenNavigateNextInEditorPicker",
    "when": "inFilesPicker && inQuickOpen"
  },
  {
    "key": "ctrl+p",
    "command": "selectPrevCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "ctrl+n",
    "command": "selectNextCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.focusFirstEditorGroup",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+shift+i",
    "command": "workbench.action.quickOpen",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+l",
    "command": "extension.vim_escape",
    "when": "editorTextFocus && vim.mode == 'Insert'"
  },
  {
    "key": "\\",
    "command": "workbench.view.explorer",
    "when": "editorTextFocus && vim.active && vim.mode != 'Insert' && vim.mode != 'CommandlineInProgress' && vim.mode != 'SearchInProgressMode'"
  },
  {
    "key": "alt+\\",
    "command": "workbench.view.extension.todo-tree-container",
    "when": "editorTextFocus && vim.active && vim.mode != 'Insert' && vim.mode != 'CommandlineInProgress' && vim.mode != 'SearchInProgressMode'"
  },
  {
    "key": "shift+\\",
    "command": "workbench.action.toggleSidebarVisibility",
    "when": "!searchInputBoxFocus && !findWidgetVisible && !inQuickOpen && vim.mode != 'Insert'"
  },

  // TERMINAL SHORTCUTS
  // Navigation
  {
    "key": "ctrl+shift+a",
    "command": "workbench.action.terminal.focusNext",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+shift+b",
    "command": "workbench.action.terminal.focusPrevious",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+shift+j",
    "command": "workbench.action.togglePanel"
  },
  {
    "key": "ctrl+shift+k",
    "command": "workbench.action.focusFirstEditorGroup"
  },
  // Terminal Modification
  {
    "key": "ctrl+shift+n",
    "command": "workbench.action.terminal.new",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+shift+w",
    "command": "workbench.action.terminal.kill",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+shift+n",
    "command": "-workbench.action.newWindow"
  },
  {
    "key": ".",
    "command": "workbench.action.terminal.focusHover",
    "when": "(terminalTabsFocus) && (terminalHasBeenCreated || terminalIsOpen || terminalProcessSupported)"
  },
  {
    "key": "ctrl+;",
    "command": "workbench.action.terminal.focusTabs",
    "when": "terminalIsOpen && !terminalTabsFocus"
  },
  {
    "key": "ctrl+;",
    "command": "workbench.action.terminal.focus",
    "when": "terminalIsOpen && terminalTabsFocus"
  },
  {
    "key": "r",
    "command": "workbench.action.terminal.rename",
    "when": "terminalTabsFocus"
  },
  {
  "key": "a",
  "command": "workbench.action.terminal.new",
  "when": "terminalTabsFocus"
  },
  {
  "key": "d",
  "command": "workbench.action.terminal.killActiveTab",
  "when": "terminalTabsFocus"
  },
  {
  "key": "i",
  "command": "workbench.action.terminal.renameWithArg",
  "args": { "name": "API" },
  "when": "terminalTabsFocus"
  },
  {
  "key": "t",
  "command": "workbench.action.terminal.renameWithArg",
  "args": { "name": "Test" },
  "when": "terminalTabsFocus"
  },
  {
  "key": "b",
  "command": "workbench.action.terminal.renameWithArg",
  "args": { "name": "Backend" },
  "when": "terminalTabsFocus"
  },
  {
  "key": "f",
  "command": "workbench.action.terminal.renameWithArg",
  "args": { "name": "Frontend" },
  "when": "terminalTabsFocus"
  },
  // FILE TREE
  // Explorer
  {
    "key": "ctrl+g",
    "command": "projectManager.listGitProjects#sideBarGit"
  },
  {
    "command": "workbench.action.toggleSidebarVisibility",
    "key": "ctrl+e"
  },
  {
    "command": "workbench.files.action.focusFilesExplorer",
    "key": "ctrl+e",
    "when": "editorTextFocus"
  },
  {
    "key": "a",
    "command": "explorer.newFile",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "command": "renameFile",
    "key": "shift+r",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "shift+n",
    "command": "explorer.newFolder",
    "when": "explorerViewletFocus"
  },
  // Expand Region
  {
    "key": "ctrl+=",
    "command": "expand_region",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+-",
    "command": "undo_expand_region",
    "when": "editorTextFocus && editorHasSelection"
  },
  {
    "key": "ctrl+shift+n",
    "command": "workbench.action.newWindow",
    "when": "!explorerViewletFocus && !terminalFocus"
  },
  {
    "command": "deleteFile",
    "key": "d",
    "when": "filesExplorerFocus && !inputFocus"
  },
  // EXTRA
  {
    "key": "ctrl+shift+5",
    "command": "editor.emmet.action.matchTag"
  },
  {
    "key": "ctrl+e",
    "command": "extension.vim_ctrl+e",
    "when": "editorTextFocus && vim.active && vim.use<C-e> && !inDebugRepl"
  },
  {
    "key": "ctrl+e",
    "command": "-extension.vim_ctrl+e",
    "when": "editorTextFocus && vim.active && vim.use<C-e> && !inDebugRepl"
  },
  {
    "key": "alt+h",
    "command": "-testing.toggleTestingPeekHistory",
    "when": "testing.isPeekVisible"
  },
  {
    "key": "ctrl+shift+u",
    "command": "-workbench.action.output.toggleOutput",
    "when": "workbench.panel.output.active"
  },
  {
    "key": "ctrl+shift+u",
    "command": "workbench.view.testing.focus"
  },
  {
    "key": "ctrl+shift+v",
    "command": "workbench.action.openRecent"
  },
  {
    "key": "ctrl+r",
    "command": "-workbench.action.openRecent"
  },
  {
    "key": "ctrl+shift+f",
    "command": "-workbench.action.findInFiles"
  },
  {
    "key": "ctrl+shift+f",
    "command": "-workbench.view.search",
    "when": "workbench.view.search.active && neverMatch =~ /doesNotMatch/"
  },
  //Macro Shortcuts
  {
    "key": "r",
    "command": "macros.renameAppend",
    "when": "filesExplorerFocus && !inputFocus"
  },
  // Other
  {
    "key": "ctrl+shift+n",
    "command": "workbench.action.newWindow",
    "when": "!terminalFocus"
  },
  //Resize Terminals
  {
    "key": "ctrl+shift+alt+j",
    "command": "workbench.action.terminal.resizePaneDown"
  },
  {
    "key": "ctrl+shift+alt+k",
    "command": "workbench.action.terminal.resizePaneUp"
  },
  {
    "key": "ctrl+shift+alt+h",
    "command": "workbench.action.terminal.resizePaneLeft"
  },
  {
    "key": "ctrl+shift+alt+l",
    "command": "workbench.action.terminal.resizePaneRight"
  },
  //Select in explorer

  //Movement
  {
    "key": "ctrl+y",
    "command": "editor.action.scrollUpHover",
    "when": "editorHoverFocused && vim.mode != 'Insert'"
  },
  {
    "key": "ctrl+e",
    "command": "editor.action.scrollDownHover",
    "when": "editorHoverFocused && vim.mode != 'Insert'"
  },
  // Explorer / Tree
  {
    "key": "shift+j",
    "command": "list.expandSelectionDown",
    "when": "listFocus && listSupportsMultiselect && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "shift+k",
    "command": "list.expandSelectionUp",
    "when": "listFocus && listSupportsMultiselect && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "gg",
    "command": "list.focusFirst",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "shift+g",
    "command": "list.focusLast",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "/",
    "command": "list.find",
    "when": "listFocus && !inputFocus && listSupportsFind"
  },
  {
    "key": "ctrl+h",
    "command": "list.collapseAll",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "ctrl+shift+g g",
    "command": "-workbench.view.scm",
    "when": "workbench.scm.active && !gitlens:disabled && config.gitlens.keymap == 'chorded'"
  },
  {
    "key": "ctrl+shift+g /",
    "command": "-gitlens.gitCommands",
    "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
  },
  {
    "key": "ctrl+shift+g .",
    "command": "-gitlens.diffWithNext",
    "when": "editorTextFocus && gitlens:enabled && !isInDiffEditor && config.gitlens.keymap == 'chorded' && resourceScheme =~ /^(gitlens|git|pr)$/"
  },
  {
    "key": "ctrl+shift+g .",
    "command": "-gitlens.diffWithNextInDiffLeft",
    "when": "editorTextFocus && gitlens:enabled && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && resourceScheme =~ /^(gitlens|git|pr)$/"
  },
  {
    "key": "ctrl+shift+g .",
    "command": "-gitlens.diffWithNextInDiffRight",
    "when": "editorTextFocus && gitlens:enabled && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && resourceScheme =~ /^(gitlens|git|pr)$/"
  },
  {
    "key": "ctrl+shift+g ,",
    "command": "-gitlens.diffWithPrevious",
    "when": "editorTextFocus && !isInDiffEditor && config.gitlens.keymap == 'chorded' && resource in 'gitlens:tabs:tracked'"
  },
  {
    "key": "ctrl+shift+g ,",
    "command": "-gitlens.diffWithPreviousInDiffLeft",
    "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && config.gitlens.keymap == 'chorded' && resource in 'gitlens:tabs:tracked'"
  },
  {
    "key": "ctrl+shift+g ,",
    "command": "-gitlens.diffWithPreviousInDiffRight",
    "when": "editorTextFocus && isInDiffRightEditor && config.gitlens.keymap == 'chorded' && resource in 'gitlens:tabs:tracked'"
  },
  {
    "key": "ctrl+shift+g shift+.",
    "command": "-gitlens.diffWithWorking",
    "when": "editorTextFocus && gitlens:enabled && config.gitlens.keymap == 'chorded' && resourceScheme =~ /^(gitlens|git|pr)$/"
  },
  {
    "key": "ctrl+shift+g shift+,",
    "command": "-gitlens.diffLineWithPrevious",
    "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && resource in 'gitlens:tabs:tracked'"
  },
  {
    "key": "ctrl+shift+g c",
    "command": "-gitlens.showQuickCommitFileDetails",
    "when": "editorTextFocus && !gitlens:disabled && config.gitlens.keymap == 'chorded'"
  },
  {
    "key": "ctrl+shift+g shift+h",
    "command": "-gitlens.showQuickRepoHistory",
    "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
  },
  {
    "key": "ctrl+shift+g s",
    "command": "-gitlens.showQuickRepoStatus",
    "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
  },
  {
    "key": "ctrl+shift+g h",
    "command": "-gitlens.showQuickFileHistory",
    "when": "!gitlens:disabled && config.gitlens.keymap == 'chorded'"
  },
  {
    "key": "ctrl+shift+g b",
    "command": "-gitlens.toggleFileBlame",
    "when": "editorTextFocus && config.gitlens.keymap == 'chorded' && resource in 'gitlens:tabs:blameable'"
  },
  {
    "key": "ctrl+shift+g shift+b",
    "command": "-gitlens.toggleCodeLens",
    "when": "editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'chorded'"
  }
]